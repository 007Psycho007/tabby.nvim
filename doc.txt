TabbyBufNameOption                                          *TabbyBufNameOption*


    Fields: ~
        {mode}  ('unique'|'relative'|'tail'|'shorten')  @defult unique


buf_name.set_default_option()                      *buf_name.set_default_option*



buf_name.get({winid}, {opt?})                                     *buf_name.get*
    get buf name

    Parameters: ~
        {winid}  (number)
        {opt?}   (TabbyBufNameOption)

    Returns: ~
        {string}


buf_name.get_unique_name({winid})                     *buf_name.get_unique_name*


    Parameters: ~
        {winid}  (number)

    Returns: ~
        {string}  filename


buf_name.get_relative_name({winid})                 *buf_name.get_relative_name*


    Parameters: ~
        {winid}  (number)

    Returns: ~
        {string}  filename


buf_name.get_tail_name({winid})                         *buf_name.get_tail_name*


    Parameters: ~
        {winid}  (number)

    Returns: ~
        {string}  filename


buf_name.get_shorten_name({winid})                   *buf_name.get_shorten_name*


    Parameters: ~
        {winid}  (number)

    Returns: ~
        {string}  filename


TabbyLine                                                            *TabbyLine*


    Fields: ~
        {tabs}         (fun():TabbyTabs)                                                            return all tabs
        {wins}         (fun():TabbyWins)                                                            return all wins
        {wins_in_tab}  (fun(tabid:number):TabbyWins)                                                return all wins in that tab
        {sep}          (fun(symbol:string,cur_hl:TabbyHighlight,back_hl:TabbyHighlight):TabbyNode)  make a separator
        {spacer}       (fun():TabbyNode)                                                            Separation point between alignment sections. Each section will be separated by an equal number of spaces.
        {api}          (TabbyAPI)                                                                   neovim apis wrapper


TabbyLineOption                                                *TabbyLineOption*


    Fields: ~
        {tab_name}  (?)  TabbyTabNameOption
        {buf_name}  (?)  TabbyBufNameOption


lines.get_line({opt?})                                          *lines.get_line*
    get line object

    Parameters: ~
        {opt?}  (TabbyLineOption)

    Returns: ~
        {TabbyLine}


TabbyTabNameOption                                          *TabbyTabNameOption*


    Fields: ~
        {name_fallback}  (fun(tabid:number):string)


tab_name.set_default_option({opt})                 *tab_name.set_default_option*
    set tab option

    Parameters: ~
        {opt}  (TabbyTabNameOption)


tab_name.set({tabid}, {name})                                     *tab_name.set*
    set tab name

    Parameters: ~
        {tabid}  (number)  tab id, 0 for current tab
        {name}   (string)


tab_name.get({tabid}, {opt?})                                     *tab_name.get*
    get tab's name

    Parameters: ~
        {tabid}  (number)              tab id, 0 for current tab
        {opt?}   (TabbyTabNameOption)

    Returns: ~
        {string}


tab_name.get_raw({tabid})                                     *tab_name.get_raw*
    get tab's raw name

    Parameters: ~
        {tabid}  (number)

    Returns: ~
        {string}  no name for tab, return empty string


TabbyTab                                                              *TabbyTab*


    Fields: ~
        {id}           (number)                        tabid
        {current_win}  (fun():TabbyWin)                current window in this tab
        {wins}         (fun():TabbyWins)               windows in this tab
        {number}       (fun():number)                  return tab number
        {is_current}   (fun():boolean)                 return if this tab is current tab
        {name}         (fun():string)                  return tab name
        {close_btn}    (fun(symbol:string):TabbyNode)  return close btn


tabwins.new_tab({tabid}, {opt})                                *tabwins.new_tab*
    new TabbyTab

    Parameters: ~
        {tabid}  (number)
        {opt}    (TabbyLineOption)

    Returns: ~
        {TabbyTab}


TabbyTabs                                                            *TabbyTabs*


    Fields: ~
        {tabs}     (TabbyTab[])                           tabs
        {foreach}  (fun(fn:fun(tab:TabbyTab)):TabbyNode)  render tabs by given render function


tabwins.new_tabs({opt})                                       *tabwins.new_tabs*
    new TabbyTabs

    Parameters: ~
        {opt}  (TabbyLineOption)

    Returns: ~
        {TabbyTabs}


TabbyWin                                                              *TabbyWin*


    Fields: ~
        {id}          (number)          winid
        {tab}         (fun():TabbyTab)  return tab this window belonged
        {is_current}  (fun():boolean)   return if this window is current window
        {file_icon}   (fun():string?)   file icon, require devicons
        {buf_name}    (fun():string)    file name


tabwins.new_win({winid}, {opt})                                *tabwins.new_win*
    new TabbyWin

    Parameters: ~
        {winid}  (number)
        {opt}    (TabbyLineOption)

    Returns: ~
        {TabbyWin}


TabbyWins                                                            *TabbyWins*


    Fields: ~
        {wins}     (TabbyWin[])                           windows
        {foreach}  (fun(fn:fun(win:TabbyWin)):TabbyNode)  render wins by given render function


tabwins.new_wins({win_ids}, {opt})                            *tabwins.new_wins*
    new win object

    Parameters: ~
        {win_ids}  (number[])         win id list
        {opt}      (TabbyLineOption)

    Returns: ~
        {TabbyWins}


M.relative({winid})                                                 *M.relative*
    @deprecated use require('tabby.module.filename').relative

    Parameters: ~
        {winid}  (number)

    Returns: ~
        {string}  filename


M.tail({winid})                                                         *M.tail*
    @deprecated use require('tabby.module.filename').tail

    Parameters: ~
        {winid}  (number)

    Returns: ~
        {string}  filename


M.shorten({winid})                                                   *M.shorten*
    @deprecated use require('tabby.module.filename').shorten

    Parameters: ~
        {winid}  (number)

    Returns: ~
        {string}  filename


M.unique({winid})                                                     *M.unique*
    @deprecated use require('tabby.module.filename').unique

    Parameters: ~
        {winid}  (number)

    Returns: ~
        {string}  filename


tabby.setup({cfg?})                                                *tabby.setup*


    Parameters: ~
        {cfg?}  (TabbyConfig)


tabby.init()                                                        *tabby.init*



tabby.show_tabline()                                        *tabby.show_tabline*



tabby.update()                                                    *tabby.update*



tabby.tab_rename()                                            *tabby.tab_rename*



tabby.handle_buf_click()                                *tabby.handle_buf_click*



TabbyComTab                                                        *TabbyComTab*


    Fields: ~
        {type}       ("tab")
        {tabid}      (number)
        {label}      (string|LegacyText)
        {left_sep}   (?)                  LegacyText
        {right_sep}  (?)                  LegacyText


TabbyComWin                                                        *TabbyComWin*


    Fields: ~
        {type}       ("win")
        {winid}      (number)
        {label}      (string|LegacyText)
        {left_sep}   (?)                  LegacyText
        {right_sep}  (?)                  LegacyText


TabbyComText                                                      *TabbyComText*


    Fields: ~
        {type}  ("text")
        {text}  (LegacyText)


TabbyComSpring                                                  *TabbyComSpring*


    Fields: ~
        {type}  ("spring")


TabbyComponent                                                  *TabbyComponent*


    Type: ~
        TabbyComTab|TabbyComWin|TabbyComText|TabbyComSpring


component.render({com})                                       *component.render*


    Parameters: ~
        {com}  (TabbyComponent)

    Returns: ~
        {string}  -format string


TabbyConfig                                                        *TabbyConfig*


    Fields: ~
        {tabline}     (?)  TabbyTablineOpt           high-level api
        {components}  (?)  fun():TabbyComponent[] low-level api
        {opt}         (?)  TabbyOption


TabbyOption                                                        *TabbyOption*


    Fields: ~
        {show_at_least}  (number)  show tabline when there are at least n tabs.


config.defaults                                                *config.defaults*


    Type: ~
        (TabbyConfig)


LegacyText                                                          *LegacyText*


    Fields: ~
        {hl}  (?)  TabbyHighlight
        {lo}  (?)  TabbyLayout


element.render_text({text})                                *element.render_text*
     render text object to statusline text

    Parameters: ~
        {text}  (string|LegacyText)

    Returns: ~
        {string}  string


element.render_spring()                                  *element.render_spring*


    Returns: ~
        {string}  string


TabbyTablineOpt                                                *TabbyTablineOpt*


    Fields: ~
        {layout}        (TabbyTablineLayout)
        {hl}            (TabbyHighlight)      background highlight
        {head}          (?)                   LegacyText[] display at start of tabline
        {active_tab}    (TabbyTabLabelOpt)
        {inactive_tab}  (TabbyTabLabelOpt)
        {win}           (TabbyWinLabelOpt)
        {active_win}    (?)                   TabbyWinLabelOpt need by "tab_with_top_win", fallback to win if this is nil
        {top_win}       (?)                   TabbyWinLabelOpt need by "active_tab_with_wins" and "active_wins_at_end", fallback to win if this is nil
        {tail}          (?)                   LegacyText[] display at end of tabline


TabbyTabLabelOpt                                              *TabbyTabLabelOpt*


    Fields: ~
        {label}      (string|LegacyText|fun(tabid:number):LegacyText)
        {left_sep}   (string|LegacyText)
        {right_sep}  (string|LegacyText)


TabbyTablineLayout                                          *TabbyTablineLayout*


    Variants: ~
        ("active_wins_at_tail")   windows in active tab will be display at end of tabline
        ("active_wins_at_end")    windows in active tab will be display at end of all tab labels
        ("tab_with_top_win")      the top window display after each tab.
        ("active_tab_with_wins")  windows label follow active tab
        ("tab_only")              no windows label, only tab


TabbyWinLabelOpt                                              *TabbyWinLabelOpt*


    Fields: ~
        {label}      (string|LegacyText|fun(winid:number):LegacyText)
        {left_sep}   (string|LegacyText)
        {inner_sep}  (string|LegacyText)                               won't works in "tab_with_top_win" layout
        {right_sep}  (string|LegacyText)


tabline.render_tab_label({tabid}, {opt})              *tabline.render_tab_label*


    Parameters: ~
        {tabid}  (number)            tab id
        {opt}    (TabbyTabLabelOpt)

    Returns: ~
        {TabbyComTab}


                                                      *tabline.render_win_label*
tabline.render_win_label({winid}, {is_first}, {is_last}, {opt})


    Parameters: ~
        {winid}     (number)            window id
        {is_first}  (boolean)
        {is_last}   (boolean)
        {opt}       (TabbyWinLabelOpt)

    Returns: ~
        {TabbyComWin}


tabline.render({opt})                                           *tabline.render*


    Parameters: ~
        {opt}  (TabbyTablineOpt)

    Returns: ~
        {string}  -format text


TabbyAPI                                                              *TabbyAPI*


    Fields: ~
        {get_tabs}             (fun():number[])              return all tab ids
        {get_tab_wins}         (fun(tabid:number):number[])  get windows in the tab
        {get_current_tab}      (fun():number)                get current tab
        {get_tab_current_win}  (fun(tabid):number)           get tab's current win
        {get_tab_number}       (fun(tabid):number)           get tab's number
        {get_wins}             (fun():number[])              get all windows, except floating window
        {get_win_tab}          (fun(winid):number)           get tab of this win
        {is_float_win}         (fun(winid:number):boolean)   return true if this window is floating return true if this window is floating
        {is_not_float_win}     (fun(winid:number):boolean)   return true if this window is not floating return true if this window is not floating


api.get_tabs()                                                    *api.get_tabs*



api.get_tab_wins()                                            *api.get_tab_wins*



api.get_current_tab()                                      *api.get_current_tab*



api.get_tab_current_win()                              *api.get_tab_current_win*



api.get_tab_number()                                        *api.get_tab_number*



api.get_wins()                                                    *api.get_wins*



api.get_win_tab()                                              *api.get_win_tab*



api.is_float_win()                                            *api.is_float_win*



api.is_not_float_win()                                    *api.is_not_float_win*



filename.flush_unique_name_cache()            *filename.flush_unique_name_cache*



filename.relative({winid})                                   *filename.relative*


    Parameters: ~
        {winid}  (number)

    Returns: ~
        {string}  filename


filename.tail({winid})                                           *filename.tail*


    Parameters: ~
        {winid}  (number)

    Returns: ~
        {string}  filename


filename.shorten({winid})                                     *filename.shorten*


    Parameters: ~
        {winid}  (number)

    Returns: ~
        {string}  filename


filename.unique({winid})                                       *filename.unique*


    Parameters: ~
        {winid}  (number)

    Returns: ~
        {string}  filename


TabbyHighlight                                                  *TabbyHighlight*


    Type: ~
        TabbyHighlightGroup|TabbyHighlightObject


TabbyHighlightGroup                                        *TabbyHighlightGroup*


    Type: ~
        string


TabbyHighlightObject                                      *TabbyHighlightObject*


    Fields: ~
        {fg}     (?)  string highlight argument guifg
        {bg}     (?)  string highlight argument guibg
        {style}  (?)  string highlight argument gui


highlight.register({hl})                                    *highlight.register*
    register highlight object to nvim

    Parameters: ~
        {hl}  (TabbyHighlightObject)

    Returns: ~
        {string}  group name


highlight.extract({group_name})                              *highlight.extract*


    Parameters: ~
        {group_name}  (string)

    Returns: ~
        {TabbyHighlightObject}


TabbyLogger                                                        *TabbyLogger*


    Fields: ~
        {message}  (function(message:string))  send string notify
        {format}   (function(format:string,)   ...:[]any) send string notify


log.inspect({v})                                                   *log.inspect*
    print any value

    Parameters: ~
        {v}  (any)


TabbyElement                                                      *TabbyElement*


    Fields: ~
        {hl}      (?)  TabbyHighlight
        {lo}      (?)  TabbyLayout
        {click}   (?)  TabbyClickHandler
        {margin}  (?)  string


TabbyLayout                                                        *TabbyLayout*


    Fields: ~
        {justify}    (?)  'left'|'right' justify @default 'left'
        {max_width}  (?)  number maximum width
        {min_width}  (?)  number minimum width


TabbyClickHandler                                            *TabbyClickHandler*


    Type: ~
        TabbyClickTab|TabbyCloseTab|TabbyCustomHander


TabbyClickTab                                                    *TabbyClickTab*



TabbyCloseTab                                                    *TabbyCloseTab*



TabbyCustomHander                                            *TabbyCustomHander*



TabbyText                                                            *TabbyText*
    @field [1] "custom"
    @field [2] number handle id

    Variants: ~



TabbyNode                                                            *TabbyNode*


    Type: ~
        TabbyElement|TabbyText


node.from_tabby_text({ttext})                             *node.from_tabby_text*
    convert legacy TabbyText to Element/Node

    Parameters: ~
        {ttext}  (LegacyText)

    Returns: ~
        {table}  TabbyElement


                                                      *node.from_label_and_seps*
node.from_label_and_seps({label}, {left_sep}, {right_sep})
    convert (left_sep, label, right_sep) to Node

    Parameters: ~
        {label}      (string|LegacyText)
        {left_sep}   (LegacyText?)
        {right_sep}  (LegacyText?)


TabbyRendererContext                                      *TabbyRendererContext*


    Fields: ~
        {parent_hl}   (TabbyHighlight)  highlight for callback
        {current_hl}  (TabbyHighlight)  highlight for render


render.node({node}, {ctx})                                         *render.node*
    render node to tabline string

    Parameters: ~
        {node}  (TabbyNode)
        {ctx}   (TabbyRendererContext?)  highlight group in context

    Returns: ~
        {string,}  rendered string and context


render.raw_element({el}, {ctx})                             *render.raw_element*
    render element with raw content

    Parameters: ~
        {el}   (TabbyElement)
        {ctx}  (TabbyRendererContext)

    Returns: ~
        {string,}  nvim statusline-styled string


render.hyper_element({el}, {ctx})                         *render.hyper_element*


    Parameters: ~
        {el}   (TabbyElement)
        {ctx}  (TabbyRendererContext)

    Returns: ~
        {string,}  TabbyRendererContext


render.highlight({hl}, {text})                                *render.highlight*
    render highlight

    Parameters: ~
        {hl}    (TabbyHighlight)
        {text}  (string)

    Returns: ~
        {string}


render.layout({lo}, {text})                                      *render.layout*
    render Layout

    Parameters: ~
        {lo}    (TabbyLayout)
        {text}  (string)

    Returns: ~
        {string}


render.click_handler({click}, {text})                     *render.click_handler*
    render click handler to string

    Parameters: ~
        {click}  (TabbyClickHandler)
        {text}   (string)

    Returns: ~
        {string}


tab.set_name({tabid}, {name})                                     *tab.set_name*
    set tab name
    @deprecated use require('tabby.feature.tab_name').set(tabid, name)

    Parameters: ~
        {tabid}  (number)
        {name}   (string)


tab.get_name({tabid})                                             *tab.get_name*
    get tab's name
    @deprecated use require('tabby.feature.tab_name').get(tabid)

    Parameters: ~
        {tabid}  (number)

    Returns: ~
        {string}


tabline.set({fn}, {opt?})                                          *tabline.set*
    set tabline render function

    Parameters: ~
        {fn}    (fun(line:TabbyLine):TabbyNode)
        {opt?}  (TabbyLineOption)


tabline.init()                                                    *tabline.init*



tabline.render()                                                *tabline.render*



TabbyTablinePresetOption                              *TabbyTablinePresetOption*
    : TabbyLineOption

    Fields: ~
        {style}  ('upward-triangle'|'downward-triangle'|'airline'|'bubble'|'non-nerdfont')  @default 'upward-triangle' @todo
        {theme}  (TabbyTablinePresetTheme)


TabbyTablinePresetTheme                                *TabbyTablinePresetTheme*


    Fields: ~
        {fill}         (TabbyHighlight)
        {head}         (TabbyHighlight)
        {current_tab}  (TabbyHighlight)
        {tab}          (TabbyHighlight)
        {win}          (TabbyHighlight)
        {tail}         (TabbyHighlight)


util.extract_nvim_hl({name})                              *util.extract_nvim_hl*
    @deprecated use require('tabby.module.highlight').extract

    Parameters: ~
        {name}  (string)

    Returns: ~
        {TabbyHighlightObject}


util.list_wins()                                                *util.list_wins*
    list all fixed wins
    @deprecated use require('tabby.module.api').get_wins

    Returns: ~
        {number[]}  of window ids


util.tabpage_list_wins()                                *util.tabpage_list_wins*
    list all fixed wins of tab
    @deprecated use require('tabby.module.api').get_tab_wins

    Returns: ~
        {number[]}  of window ids


util.set_tab_name({tabid}, {name})                           *util.set_tab_name*
    @deprecated use require('tabby.feature.tab_name').set(tabid, name)

    Parameters: ~
        {tabid}  (number)
        {name}   (string)


util.get_tab_name({tabid}, {fallback?})                      *util.get_tab_name*
    get tab's name, if not set, will return the name made by fallback.
    @deprecated use require('tabby.feature.tab_name').get(tabid)

    Parameters: ~
        {tabid}      (number)
        {fallback?}  (fun(tabid:number):string)  Default fallback is like "init.lua[2+]", the filename is came from the focus window.


                                                             *util.combine_text*
util.combine_text({texts}, {sep?}, {left?}, {right?})
     conbine texts
    @deprecated use TabbyNode.margin

    Parameters: ~
        {texts}   (string[])  texts to be combine
        {sep?}    (string)    the seprator, default is ' '
        {left?}   (string)    the left padding, default is sep
        {right?}  (string)    the left padding, default is left

    Returns: ~
        {string}  text


win.all()                                                              *win.all*
    list all win id
    @deprecated use require('tabby.module.api').get_wins

    Returns: ~
        {number[]}


win.all_in_tab({tabid})                                         *win.all_in_tab*
    list all win id in a tab
    @deprecated use require('tabby.module.api').get_tab_wins

    Parameters: ~
        {tabid}  (number)

    Returns: ~
        {number[]}


vim:tw=78:ts=8:noet:ft=help:norl:
